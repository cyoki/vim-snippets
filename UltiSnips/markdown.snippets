priority -50

global !p
# A overkill(dirty) table with automatic alignment feature
def create_table(snip):
	# retrieving single line from current string and treat it like tabstops count
	placeholders_string = snip.buffer[snip.line].strip()
	rows_amount = int(placeholders_string[0])
	columns_amount = int(placeholders_string[1])

	prefix_str = "from vimsnippets import display_width;"

	# erase current line
	snip.buffer[snip.line] = ""

	# create anonymous snippet with expected content and number of tabstops
	anon_snippet_title = "| "
	anon_snippet_delimiter = "|"
	for col in range(1, columns_amount+1):
		sync_rows = [x*columns_amount+col for x in range(rows_amount+1)]
		sync_str = ",".join(["t[{0}]".format(x) for x in sync_rows])
		max_width_str = "max(list(map(display_width, [" + sync_str + "])))"
		cur_width_str = "display_width(t[" + str(col) + "])"
		rv_val = "(" + max_width_str + "-" + cur_width_str + ")*' '"
		anon_snippet_title += "${" + str(col)  + ":head" + str(col)\
			+ "}`!p " + prefix_str + "snip.rv=" + rv_val + "` | "
		anon_snippet_delimiter += ":`!p " + prefix_str + "snip.rv = "\
			+ max_width_str + "*'-'" + "`-|"

	anon_snippet_title += "\n"

	anon_snippet_delimiter += "\n"
	anon_snippet_body = ""
	for row in range(1, rows_amount+1):
		body_row = "| "
		for col in range(1, columns_amount+1):
			sync_rows = [x*columns_amount+col for x in range(rows_amount+1)]
			sync_str = ",".join(["t[{0}]".format(x) for x in sync_rows])
			max_width_str = "max(list(map(display_width, [" + sync_str + "])))"
			cur_width_str = "display_width(t[" + str(row*columns_amount+col) + "])"
			rv_val = "(" + max_width_str + "-" + cur_width_str + ")*' '"
			placeholder = "R{0}C{1}".format(row, col)
			body_row += "${" + str(row*columns_amount+col)  + ":" + placeholder\
				+ "}`!p " + prefix_str + "snip.rv=" + rv_val + "` | "

		body_row += "\n"
		anon_snippet_body += body_row

	anon_snippet_table = anon_snippet_title + anon_snippet_delimiter + anon_snippet_body

	# expand anonymous snippet
	snip.expand_anon(anon_snippet_table)
endglobal

###########################
# Sections and Paragraphs #
###########################
snippet h1 "heading level 1" b
# ${1:heading 1}
$0
endsnippet

snippet h2 "heading level 2" b
## ${1:heading 2}
$0
endsnippet

snippet h3 "heading level 3" b
### ${1:heading 3}
$0
endsnippet

snippet h4 "heading level 4" b
#### ${1:heading 4}
$0
endsnippet

snippet h5 "heading level 5" b
##### ${1:heading 5}
$0
endsnippet

###################
# Text formatting #
###################

snippet * "italics"
*${1:italics}*$0
endsnippet

snippet ** "bold"
**${1:bold}**$0
endsnippet

snippet __ "bold"
__${1:bold}__$0
endsnippet

snippet ~~ "strike"
~~${1:strike}~~$0
endsnippet

snippet *** "bold italics"
***${1:bold italics}***$0
endsnippet

snippet -- "comment"
<!-- ${1:comment}} -->$0
endsnippet

###########
#  Links  #
###########

snippet lk "link to somewhere"
[${1:link}](${2:url})$0
endsnippet

snippet rlk "reference link to somewhere"
[${1:link}][${2:id}]$0

[$2]: ${3:url}
endsnippet

snippet lkt "link to somewhere with title"
[${1:link}](${2:url} "${3:title}")$0
endsnippet

snippet rlkt "reference link to somewhere with title"
[${1:link}][${2:id}]$0

[$2]: ${3:url} "${4:title}"
endsnippet

############
#  Images  #
############

snippet im "image to somewhere"
![${1:text}](${2:url})$0
endsnippet

snippet rim "reference img to somewhere"
![${1:text}][${2:id}]$0

[$2]: ${3:url}
endsnippet

snippet imt "link to somewhere with title"
![${1:text}](${2:url} "${3:title}")$0
endsnippet

snippet rimt "reference link to somewhere with title"
![${1:text}][${2:id}]$0

[$2]: ${3:url} "${4:title}"
endsnippet

snippet fnt "footnote"
[^${1:footnote}]$0

[^$1]: ${2:text}
endsnippet

################
#  CodeBlocks  #
################

snippet ` "inline code" w
\`${1:inline code}\`$0
endsnippet

snippet ``` "codeblock" b
\`\`\`$1
${2:codeblock}
\`\`\`
$0
endsnippet

############
#  Tables  #
############

post_jump "create_table(snip)"
snippet "tb([1-9][1-9])" "table with m*n" br
`!p snip.rv = match.group(1)`
endsnippet

#############
#  Itemize  #
#############

snippet oi "ordered items" b
1. ${1:order}
endsnippet

snippet ui "unordered items" b
* ${1:unorder}
endsnippet

###############
#  TaskLists  #
###############

snippet tl "task list" b
- [${1:x}] ${2:task}
endsnippet

# vim:ft=snippets:
